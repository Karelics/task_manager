[mypy]
ignore_missing_imports = True

# Python version to be compatible with
python_version = 3.8

#
# Define type checking settings. These settings are pretty strict.
#

# Warns about per-module sections in the config file that do not match any files processed when invoking mypy.
warn_unused_configs = True

# Disallows usage of generic types that do not specify explicit type parameters.
disallow_any_generics = True

# Disallows subclassing a value of type Any.
disallow_subclassing_any = True

# Disallows calling functions without type annotations from functions with type annotations.
# Hopefully this makes adding types more attractive.
disallow_untyped_calls = True

# Disallows defining functions without type annotations or with incomplete type annotations.
disallow_untyped_defs = False

# Disallows defining functions with incomplete type annotations.
disallow_incomplete_defs = True

# Type-checks the interior of functions without type annotations.
check_untyped_defs = True

# Reports an error whenever a function with type annotations is decorated with a decorator without annotations.
disallow_untyped_decorators = True

# Warns about casting an expression to its inferred type.
warn_redundant_casts = True

# Warns about unneeded # type: ignore comments.
warn_unused_ignores = True

# Shows errors for missing return statements on some execution paths.
warn_return_any = True

# Shows a warning when encountering any code inferred to be unreachable or redundant after performing type analysis.
warn_unreachable = True

# By default, imported values to a module are treated as exported and mypy allows other modules to import them. When
# false, mypy will not re-export unless the item is imported using from-as or is included in __all__.
implicit_reexport = false

# Prohibit equality checks, identity checks, and container checks between non-overlapping types.
strict_equality = True

# Changes the treatment of arguments with a default value of None by not implicitly making their type Optional.
no_implicit_optional = True
